% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utility_functions.R
\name{merge_snpRdata}
\alias{merge_snpRdata}
\title{Merge two snpRdata objects}
\usage{
merge_snpRdata(
  x,
  y,
  by.sample = intersect(names(sample.meta(x)), names(sample.meta(y))),
  by.sample.x = by.sample,
  by.sample.y = by.sample,
  by.snp = intersect(names(snp.meta(x)), names(snp.meta(y))),
  by.snp.x = by.snp,
  by.snp.y = by.snp,
  all = TRUE,
  all.x.snps = all,
  all.y.snps = all,
  all.x.samples = all,
  all.y.samples = all,
  resolve_conflicts = "error"
)
}
\arguments{
\item{x, y}{\code{snpRdata} objects to merge}

\item{by.sample, by.sample.x, by.sample.y}{Columns of sample metadata by which
to merge across samples--function identically to the \code{by}, \code{by.x},
and \code{by.y} arguments to \code{\link[base]{merge}}, see documentation
there for details.}

\item{by.snp, by.snp.x, by.snp.y}{Columns of SNP metadata by which to merge
across SNPs--function idetically to the \code{by}, \code{by.x}, and
\code{by.y} arguments to \code{\link[base]{merge}}, see documentation there
for details.}

\item{all}{logical, default TRUE. If TRUE, all samples and SNPs will be 
maintained in the output \code{snpRdata} object, with missing data matching
the missing data format of \code{x} added where genotypes are not in
either \code{x} or \code{y}.}

\item{all.x.snps, all.y.snps}{logical, default \code{all}. Keep SNPs in the data
even if they are only present in \code{x} or \code{y}, respectively.}

\item{all.x.samples, all.y.samples}{logical, default \code{all}. Keep samples in the
data even if they are only present in \code{x} or \code{y}, respectively.}

\item{resolve_conflicts}{character, default 'error'. Controls how
conflicting genotypic information in \code{x} and \code{y} is handled. See
'Details' for options and explanation.}
}
\value{
A merged \code{snpRdata} object.
}
\description{
Merge two snpRdata objects using sample and SNP metadata. Functions
much like base R's  \code{\link[base]{merge}} function, but
the 'by' and 'all' options can be specified at the SNP and sample level.
}
\details{
While this function can be used essentially identically to how one might
use base R's \code{\link[base]{merge}} function, there are a few differences
to note. 

First, samples that are genotyped at identical loci 
in both data sets can be handled several ways, controlled by the
\code{resolve_conflicts} argument: \itemize{\item{warning:} Return a harsh 
warning and a data frame with more information on genotypes at identical 
samples/SNPs are different between \code{x} and \code{y}. 
\item{error: } The default, return an error when conflicts are detected.
\item{x} Use genotypes from \code{x} to resolve conflicts.
\item{y} Use genotypes from \code{y} to resolve conflicts.
\item{random} Randomly sample (non-missing) genotypes from \code{x}
and \code{y} to resolve conflicts.}
Note that called genotypes are always taken over un-called genotypes when
there are merge conflicts, and missing data in one but not the other data set
will not trigger an error or a warning if those options are selected.

Secondly, the \code{by} and \code{all} arugment families from 
\code{\link[base]{merge}} are extended to refer to either samples or SNPs,
such that all samples can be maintained but not all SNPs, for example.

Lastly, all of the \code{all} family of arguments default to \code{TRUE}
instead of \code{FALSE}, since purely overlapping genotypes/SNPs is unlikely
to be desired. \code{FALSE} values provided to any specific \code{all}
argument will sill override \code{all = TRUE}, as in 
\code{\link[base]{merge}}.

At present, \code{\link{merge_snpRdata}} is not maximally efficient in that
it will remove all tabulated statistics and re-tabulate all internal 
summaries. Improvements are in development.
}
\examples{
# create data to merge in
y <- data.frame(s1 = c("GG", "NN"),
                s2 = c("GG", "TG"),
                s3 = c("GG", "TT"),
                s4 = c("GA", "TT"),
                s5 = c("GG", "GT"),
                s6 = c("NN", "GG"))
                
snp.y <- data.frame(chr = c("groupVI", "test_chr"),
                    position = c(212436, 10))
                   
samp.y <- data.frame(pop = c("ASP", "ASP", "ASP", "test1", "test2", "test3"),
                     ID = c(1, 2, 3, "A1", "A2", "A3"),
                     fam = c("A", "B", "C", "T", "T", "T"))
y <- import.snpR.data(y, snp.y, samp.y)

x <- stickSNPs
sample.meta(x)$ID <- 1:ncol(dx)

\dontrun{
# Not run, will error due to conflicts
z <- merge_snpRdata(x, y)

# Not run, will return a warning and report mismatches
z <- merge_snpRdata(x, y, resolve_conflicts = "warning")
}

# take a random genotype in the case of conflicts
z <- merge_snpRdata(x, y, resolve_conflicts = "random")
z

}
\author{
William Hemstrom
}
